<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Sultan (0x5bjorn)</title><link>https://0x5bjorn.github.io/posts/</link><description>Recent content in Posts on Sultan (0x5bjorn)</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 15 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://0x5bjorn.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple DLL injector with GUI (dll-inj)</title><link>https://0x5bjorn.github.io/posts/dll-inj/</link><pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate><guid>https://0x5bjorn.github.io/posts/dll-inj/</guid><description>
&lt;p>Simple DLL injector with GUI written in C++ for educational purposes only&lt;/p>
&lt;p>&lt;em>in development&lt;/em> &lt;a href="https://github.com/0x5bjorn/dll-inj">repository&lt;/a>&lt;/p>
&lt;p>&lt;figure>
&lt;picture>
&lt;img
loading="lazy"
decoding="async"
alt="demo"
class="image_figure image_internal image_unprocessed"
src="https://0x5bjorn.github.io/images/posts-media/dll-inj/demo.gif"
/>
&lt;/picture>
&lt;/figure>
&lt;/p>
&lt;h2 id="code-organization">Code organization&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Application&lt;/strong> - application and app window management&lt;/li>
&lt;li>&lt;strong>Injection&lt;/strong> - DLL injection implemention using Windows API&lt;/li>
&lt;li>&lt;strong>Proc&lt;/strong> - process and process modules querying handler&lt;/li>
&lt;li>&lt;strong>GUI&lt;/strong> - GUI management using &lt;a href="https://github.com/ocornut/imgui">Dear ImGui&lt;/a>&lt;/li>
&lt;li>&lt;strong>OpenDialogBox&lt;/strong> - file selection dialog box using Windows API&lt;/li>
&lt;/ul>
&lt;h2 id="dll-injection">DLL injection&lt;/h2>
&lt;p>One of the most known &lt;em>code injection&lt;/em> techniques in Windows environments is &lt;strong>Dynamic Link Library (DLL) injection&lt;/strong>. The core idea is to execute arbitrary external code in the context of running processes. This can be done by misusing legitimate Windows API functionality and its designed features. Injection is used for the following list of malicious operations:&lt;/p></description></item><item><title>UMS</title><link>https://0x5bjorn.github.io/posts/ums/</link><pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate><guid>https://0x5bjorn.github.io/posts/ums/</guid><description>
&lt;h2 id="aosv-final-project-report">AOSV Final Project Report&lt;/h2>
&lt;p>&lt;em>A.Y. 2020/2021&lt;/em>&lt;br>
&lt;strong>&lt;a href="https://github.com/0x5bjorn/AOSV-project">repository&lt;/a>&lt;/strong>&lt;/p>
&lt;!-- Author(s): Sultan Umabraev (1954544) -->
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The goal of the project was to implement &lt;strong>User Mode thread Scheduling&lt;/strong> mechanism for the Linux distribution, inspired by the &lt;strong>User-mode scheduling (UMS)&lt;/strong> implementation available in the Windows kernel [1]. UMS is a mechanism that allows applications/programs in the user mode to schedule their own threads without involving the kernel/system scheduler. The main goal and advantage is that thread switching in user mode is &amp;quot;&lt;em>more efficient than thread pools for managing large numbers of short-duration work items that require few system calls.&lt;/em>&amp;quot; [2].&lt;/p></description></item></channel></rss>